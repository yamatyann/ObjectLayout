/* autogenerated by Processing revision 1301 on 2025-07-07 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import javax.swing.JFileChooser;
import java.io.File;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class setuzokuzu extends PApplet {



// 機材クラス定義
float size = 10; // サイズを小さくするためのスケール

abstract class Equipment {
  float x, y;
  int c;
  int r;

  Equipment(float x, float y, int c, int r) {
    this.x = x;
    this.y = y;
    this.c = c;
    this.r = r;
  }

  public abstract void display();
}

class CircleEquipment extends Equipment {
  float radius;

  CircleEquipment(float x, float y, float radius, int c, int r) {
    super(x, y, c, r);
    this.radius = radius;
  }

  public void display() {
    pushMatrix();
    rotate(r * 2*PI/12);
    fill(c);
    ellipse(x, y, radius * 2, radius * 2);
    popMatrix();
  }
}

class RectEquipment extends Equipment {
  float w, h;

  RectEquipment(float x, float y, float w, float h, int c, int r) {
    super(x, y, c, r);
    this.w = w;
    this.h = h;
  }

  public void display() {
    pushMatrix();
    rotate(r * 2*PI/12);
    fill(c);
    rect(x, y, w, h);
    popMatrix();
  }
}

class PolygonEquipment extends Equipment {
  float[] xPoints;
  float[] yPoints;

  PolygonEquipment(float x, float y, float[] xPoints, float[] yPoints, int c, int r) {
    super(x, y, c, r);
    this.xPoints = xPoints;
    this.yPoints = yPoints;
  }

  public void display() {
    pushMatrix();
    rotate(r * 2*PI/12);
    fill(c);
    beginShape();
    for (int i = 0; i < xPoints.length; i++) {
      vertex(x + xPoints[i], y + yPoints[i]);
    }
    endShape(CLOSE);
    popMatrix();
  }
}

abstract class Line {
  float sx, sy, ex, ey;
  int c;

  Line(float sx, float sy, float ex, float ey, int c) {
    this.sx = sx;
    this.sy = sy;
    this.ex = ex;
    this.ey = ey;
    this.c = c;
  }

  public abstract void display();
}

class JustLine extends Line {

  JustLine(float sx, float sy, float ex, float ey, int c) {
    super(sx, sy, ex, ey, c);
  }

  public void display() {
    stroke(c);
    strokeWeight(3);
    line(sx, sy, ex, ey);
    strokeWeight(1);
    stroke(0);
  }
}

class LLine extends Line {
  float mx;
  float my;

  LLine(float sx, float sy, float ex, float ey, float mx, float my, int c) {
    super(sx, sy, ex, ey, c);
    this.mx = mx;
    this.my = my;
  }

  public void display() {
    stroke(c);
    strokeWeight(3);
    line(sx, sy, mx, my);
    line(mx, my, ex, ey);
    strokeWeight(1);
    stroke(0);
  }
}

class BracketLine extends Line {
  float m1x;
  float m1y;
  float m2x;
  float m2y;

  BracketLine(float sx, float sy, float ex, float ey, float m1x, float m1y, float m2x, float m2y, int c) {
    super(sx, sy, ex, ey, c);
    this.m1x = m1x;
    this.m1y = m1y;
    this.m2x = m2x;
    this.m2y = m2y;
  }

  public void display() {
    stroke(c);
    strokeWeight(3);
    line(sx, sy, m1x, m1y);
    line(m1x, m1y, m2x, m2y);
    line(m2x, m2y, ex, ey);
    strokeWeight(1);
    stroke(0);
  }
}

public void drawVerticalLines(ArrayList<Equipment> objects) {
  for (int i = 1; i < objects.size(); i++) {
    Equipment obj = objects.get(i);
    float cosValue = cos(obj.r * 2 * PI / 12);
    float sinValue = sin(obj.r * 2 * PI / 12);
    float xValue = obj.x * cosValue - obj.y * sinValue;
    float yValue = obj.x * sinValue + obj.y * cosValue;

    if (xValue - 10 < mouseX && mouseX < xValue + 10) {
      ox = xValue;
      line(ox, 50 + 50, ox, 550 - 50);
    }
    if (yValue - 10 < mouseY && mouseY < yValue +10) {
      oy = yValue;
      line(80, oy, width-15+20, oy);
    }
  }
}

public void smartGuides(ArrayList<Equipment> objects) {
  for (int i = 1; i < objects.size(); i++) {
    for (int j = 1; j < 5; j++) {
      Equipment obj = objects.get(i);
      float cosValue = cos(obj.r * 2 * PI / 12);
      float sinValue = sin(obj.r * 2 * PI / 12);
      float xValue = (obj.x+size*1.2f*(6.0f-12.0f/5.0f*j)) * cosValue - obj.y * sinValue;
      float yValue = (obj.x+size*1.2f*(6.0f-12.0f/5.0f*j)) * sinValue + obj.y * cosValue;

      if (xValue - 10 < mouseX && mouseX < xValue + 10 && yValue - 10 < mouseY && mouseY < yValue +10) {
        ox = xValue;
        line(ox, 50 + 50, ox, 550 - 50);
        oy = yValue;
        line(80, oy, width-15+20, oy);
      }
    }
  }
}

public boolean onObject(Equipment obj) {
  float cosValue = cos(obj.r * 2 * PI / 12);
  float sinValue = sin(obj.r * 2 * PI / 12);
  float xValue = obj.x * cosValue - obj.y * sinValue;
  float yValue = obj.x * sinValue + obj.y * cosValue;

  if (obj instanceof CircleEquipment) {
    CircleEquipment circle = (CircleEquipment) obj;
    float r = circle.radius;
    if (pow((mouseX-xValue), 2) + pow((mouseY-yValue), 2) < pow(r, 2)) {
      return true;
    }
  } else if (obj instanceof PolygonEquipment) {
    PolygonEquipment polygon = (PolygonEquipment) obj;

    boolean judge = false;
    float pbx;
    float pby;
    float p0x;
    float p0y;
    float p1x;
    float p1y;
    float p2x;
    float p2y;
    float px = mouseX;
    float py = mouseY;

    pbx = obj.x + polygon.xPoints[0];
    pby = obj.y + polygon.yPoints[0];
    p0x = pbx * cosValue - pby * sinValue;
    p0y = pbx * sinValue + pby * cosValue;

    for (int k = 0; k < polygon.xPoints.length-2; k++) {
      pbx = obj.x + polygon.xPoints[k+1];
      pby = obj.y + polygon.yPoints[k+1];
      p1x = pbx * cosValue - pby * sinValue;
      p1y = pbx * sinValue + pby * cosValue;

      pbx = obj.x + polygon.xPoints[k+2];
      pby = obj.y + polygon.yPoints[k+2];
      p2x = pbx * cosValue - pby * sinValue;
      p2y = pbx * sinValue + pby * cosValue;

      //(p0x, p0y),(p1x, p1y),(p2x, p2y)の三角形
      //(px, py)が判定したい点
      float Area = 0.5f *(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);
      float s = 1/(2*Area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);
      float t = 1/(2*Area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);

      if ((0 <= s && s <= 1) && (0 <= t && t <= 1) && (0<=1-s-t && 1-s-t<=1)) {
        judge = true; //Inside Triangle
      }
    }

    if (judge) {
      return true;
    }
  } else if (obj instanceof RectEquipment) {
    boolean judge1 = false, judge2 = false;
    RectEquipment rect = (RectEquipment) obj;
    float p0x = (obj.x-rect.w/2) * cosValue - (obj.y-rect.h/2) * sinValue;
    float p0y = (obj.x-rect.w/2) * sinValue + (obj.y-rect.h/2) * cosValue;
    float p1x = (obj.x+rect.w/2) * cosValue - (obj.y-rect.h/2) * sinValue;
    float p1y = (obj.x+rect.w/2) * sinValue + (obj.y-rect.h/2) * cosValue;
    float p2x = (obj.x+rect.w/2) * cosValue - (obj.y+rect.h/2) * sinValue;
    float p2y = (obj.x+rect.w/2) * sinValue + (obj.y+rect.h/2) * cosValue;
    float p3x = (obj.x-rect.w/2) * cosValue - (obj.y+rect.h/2) * sinValue;
    float p3y = (obj.x-rect.w/2) * sinValue + (obj.y+rect.h/2) * cosValue;
    float px = mouseX;
    float py = mouseY;

    //(p0x, p0y),(p1x, p1y),(p2x, p2y)の三角形
    //(px, py)が判定したい点
    float Area = 0.5f *(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);
    float s = 1/(2*Area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);
    float t = 1/(2*Area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);

    float Area1 = 0.5f *(-p2y*p3x + p0y*(-p2x + p3x) + p0x*(p2y - p3y) + p2x*p3y);
    float s1 = 1/(2*Area1)*(p0y*p3x - p0x*p3y + (p3y - p0y)*px + (p0x - p3x)*py);
    float t1 = 1/(2*Area1)*(p0x*p2y - p0y*p2x + (p0y - p2y)*px + (p2x - p0x)*py);

    if ((0 < s && s < 1) && (0 < t && t < 1) && (0<1-s-t && 1-s-t<1)) {
      judge1 = true; //Inside Triangle
    }

    if ((0 < s1 && s1 < 1) && (0 < t1 && t1 < 1) && (0<1-s1-t1 && 1-s1-t1<1)) {
      judge2 = true; //Inside Triangle
    }

    if (judge1 || judge2) {
      return true;
    }
  }
  return false;
}

public void removeObject(ArrayList<Equipment> objects) {
  boolean removed = false;
  for (int i = objects.size()-1; i > 0; i--) {
    Equipment obj = objects.get(i);
    if (onObject(obj)) {
      objects.remove(i);
      removed = true;
    }
    if (removed) break;
  }
}



public void removeLine(ArrayList<Line> Lines) {
  if (touchLine(Lines) != -1)Lines.remove(touchLine(Lines));
}

// 各機材ごとに配列を用意
ArrayList<Equipment> leds;
ArrayList<Equipment> mega64s;
ArrayList<Equipment> movings;
ArrayList<Equipment> par12s;
ArrayList<Equipment> strobes;
ArrayList<Equipment> dekkers;
ArrayList<Equipment> oldColorbars;
ArrayList<Equipment> newColorbars;
ArrayList<Equipment> phantoms;
ArrayList<Equipment> sceneSetters;
ArrayList<Equipment> miniDesks;
ArrayList<Equipment> ePar38s;
ArrayList<Equipment> led38Bs;
ArrayList<Equipment> flatPars;
ArrayList<Equipment> bk75s;
ArrayList<Equipment> par20s;
ArrayList<Equipment> par30s;
ArrayList<Equipment> par46s;
ArrayList<Equipment> bolds;
ArrayList<Equipment> dimmerPacks;
ArrayList<Equipment> tables;
ArrayList<Equipment> stands;
ArrayList<Equipment> trusses;
ArrayList<Line> justLines;
ArrayList<Line> lLines;
ArrayList<Line> bracketLines;

// 各機材を追加する関数
public void addLeds(float x, float y, int r) {
  leds.add(new CircleEquipment(x, y, size, color(255, 165, 0), r)); // LED
}

public void addMega64s(float x, float y, int r) {
  mega64s.add(new CircleEquipment(x, y, size, color(255, 69, 0), r)); // MEGA64
}

public void addMovings(float x, float y, int r) {
  movings.add(new CircleEquipment(x, y, size, color(0, 191, 255), r)); // Moving
}

public void addPar12s(float x, float y, int r) {
  par12s.add(new CircleEquipment(x, y, size, color(50, 205, 50), r)); // Par12
}

public void addStrobes(float x, float y, int r) {
  strobes.add(new RectEquipment(x, y, size * 2.67f, size * 1.33f, color(135, 206, 235), r)); // Strobe
}

public void addDekkers(float x, float y, int r) {
  dekkers.add(new PolygonEquipment(x, y,
    new float[]{-size, -size, size, size, size * 0.5f, -size * 0.5f},
    new float[]{-size * 0.5f, size * 0.5f, size * 0.5f, -size * 0.5f, -size, -size},
    color(255, 105, 180), r)); // Dekker
}

public void addOldColorbars(float x, float y, int r) {
  oldColorbars.add(new RectEquipment(x, y, size * 2.67f, size * 0.67f, color(240, 255, 255), r)); // 旧colorbar
}

public void addNewColorbars(float x, float y, int r) {
  newColorbars.add(new RectEquipment(x, y, size * 2.67f, size * 0.67f, color(255, 165, 0), r)); // 新colorbar
}

public void addPhantoms(float x, float y, int r) {
  phantoms.add(new RectEquipment(x, y, size * 4, size * 2, color(255, 20, 147), r)); // Phantom
}

public void addSceneSetters(float x, float y, int r) {
  sceneSetters.add(new RectEquipment(x, y, size * 4, size * 2, color(0, 0, 255), r)); // SceneSetter
}

public void addMiniDesks(float x, float y, int r) {
  miniDesks.add(new RectEquipment(x, y, size * 4, size * 2, color(255, 69, 0), r)); // mini卓
}

public void addEPar38s(float x, float y, int r) {
  ePar38s.add(new CircleEquipment(x, y, size, color(0, 255, 255), r)); // ePar38
}

public void addLed38Bs(float x, float y, int r) {
  led38Bs.add(new CircleEquipment(x, y, size, color(255, 255, 0), r)); // 38B LED
}

public void addFlatPars(float x, float y, int r) {
  flatPars.add(new CircleEquipment(x, y, size, color(65, 105, 225), r)); // Flat Par
}

public void addBk75s(float x, float y, int r) {
  bk75s.add(new CircleEquipment(x, y, size, color(255, 192, 203), r)); // 75BK
}

public void addPar20s(float x, float y, int r) {
  par20s.add(new RectEquipment(x, y, 2*size, 2*size, color(255, 165, 0), r)); // Par20
}

public void addPar30s(float x, float y, int r) {
  par30s.add(new RectEquipment(x, y, 2*size, 2*size, color(255, 69, 0), r));  // Par30
}

public void addPar46s(float x, float y, int r) {
  par46s.add(new RectEquipment(x, y, 2*size, 2*size, color(0, 191, 255), r)); // Par46
}

public void addBolds(float x, float y, int r) {
  bolds.add(new RectEquipment(x, y, size * 4, size * 2, color(138, 43, 226), r)); // Bold
}

public void addDimmerPacks(float x, float y, int r) {
  dimmerPacks.add(new RectEquipment(x, y, size * 2, size * 2.5f, color(215, 215, 215), r)); // DimmerPack
}

public void addTables(float x, float y, int r) {
  tables.add(new RectEquipment(x, y, size * 5.33f, size * 2.67f, color(255, 255, 255), r)); // Table
}

public void addStands(float x, float y, int r) {
  stands.add(new RectEquipment(x, y, size * 12, size * 1.33f, color(0, 0, 0), r)); // Stand
}

public void addTrusses(float x, float y, int r) {
  trusses.add(new RectEquipment(x, y, size * 12, size * 1.33f, color(100, 100, 100), r)); // Truss
}

public void addJustLines(float sx, float sy, float ex, float ey, int c) {
  justLines.add(new JustLine(sx, sy, ex, ey, c));
}

public void addLLines(float sx, float sy, float ex, float ey, float mx, float my, int c) {
  lLines.add(new LLine(sx, sy, ex, ey, mx, my, c));
}

public void addBracketLines(float sx, float sy, float ex, float ey, float m1x, float m1y, float m2x, float m2y, int c) {
  bracketLines.add(new BracketLine(sx, sy, ex, ey, m1x, m1y, m2x, m2y, c));
}

//PFont font;
// メインプログラム
public void setup() {
  makeTable = false;
  saving = false;
  /*
  font = loadFont("All.vlw");
   textFont(font, 20);
   */

  /* size commented out by preprocessor */;

  // 配列の初期化
  leds = new ArrayList<Equipment>();
  mega64s = new ArrayList<Equipment>();
  movings = new ArrayList<Equipment>();
  par12s = new ArrayList<Equipment>();
  strobes = new ArrayList<Equipment>();
  dekkers = new ArrayList<Equipment>();
  oldColorbars = new ArrayList<Equipment>();
  newColorbars = new ArrayList<Equipment>();
  phantoms = new ArrayList<Equipment>();
  sceneSetters = new ArrayList<Equipment>();
  miniDesks = new ArrayList<Equipment>();
  ePar38s = new ArrayList<Equipment>();
  led38Bs = new ArrayList<Equipment>();
  flatPars = new ArrayList<Equipment>();
  bk75s = new ArrayList<Equipment>();
  par20s = new ArrayList<Equipment>();
  par30s = new ArrayList<Equipment>();
  par46s = new ArrayList<Equipment>();
  bolds = new ArrayList<Equipment>();
  dimmerPacks = new ArrayList<Equipment>();
  tables = new ArrayList<Equipment>();
  stands = new ArrayList<Equipment>();
  trusses = new ArrayList<Equipment>();
  justLines = new ArrayList<Line>();
  lLines = new ArrayList<Line>();
  bracketLines = new ArrayList<Line>();

  // 機材の追加
  addLeds(width/10+width/5, 60, 0);//par
  addMega64s(width/10+2*width/5, 60, 0);
  addMovings(width/10+3*width/5, 60, 0);
  addPar12s(width/10+4*width/5, 60, 0);
  addStrobes(width/10+width/3, 60, 0);//装飾
  addDekkers(width/10+2*width/3, 60, 0);
  addOldColorbars(width/10+width/3, 60, 0);//カラーバー
  addNewColorbars(width/10+2*width/3, 60, 0);
  addPhantoms(width/10+width/4, 60, 0);//卓
  addSceneSetters(width/10+2*width/4, 60, 0);
  addMiniDesks(width/10+3*width/4, 60, 0);
  addEPar38s(width/10+3*width/18, 60, 0);//電軽
  addLed38Bs(width/10+5*width/18, 60, 0);
  addFlatPars(width/10+7*width/18, 60, 0);
  addBk75s(width/10+9*width/18, 60, 0);
  addPar20s(width/10+11*width/18, 60, 0);
  addPar30s(width/10+13*width/18, 60, 0);
  addPar46s(width/10+15*width/18, 60, 0);
  addBolds(width/10+width/3, 60, 0);//その他
  addDimmerPacks(width/10+2*width/3, 60, 0);

  addTables(width/10+width/2, 60, 0);//スタンド類
  addStands(width/10+width/2, 60, 0);
  addTrusses(width/10+width/2, 60, 0);

  addJustLines(width/10+width/5, 50, width/10+width/5, 70, color(0));
  addLLines(width/10+2*width/5-15, 50, width/10+2*width/5+15, 70, width/10+2*width/5-15, 70, color(0));
  addBracketLines(width/10+3*width/5-15, 50, width/10+3*width/5+15, 70, width/10+3*width/5-15, 60, width/10+3*width/5+15, 60, color(0));
  addBracketLines(width/10+4*width/5-15, 50, width/10+4*width/5+15, 70, width/10+4*width/5, 50, width/10+4*width/5, 70, color(0));
}

public void draw() {
  oneClick();
  background(240);  // 特定の機材オブジェクトを描画
  rectMode(CENTER);
  textAlign(CENTER, CENTER);
  drawObject();
  if (saving)saveLocation();

  if (!fileing) {
    AddObjects();
    AddLines();
    changeLineType();
  }
  menus();
  tabs();
  if (!fileing) {
    lists();
    removes();
    replaces();
  }
}

public void drawObject() {
  for (int i = 1; i <  tables.size(); i++) {
    tables.get(i).display();
  }
  for (int i = 1; i <  stands.size(); i++) {
    stands.get(i).display();
  }
  for (int i = 1; i <  trusses.size(); i++) {
    trusses.get(i).display();
  }
  for (int i = 1; i <  justLines.size(); i++) {
    justLines.get(i).display();
  }
  for (int i = 1; i <  lLines.size(); i++) {
    lLines.get(i).display();
  }
  for (int i = 2; i <  bracketLines.size(); i++) {
    bracketLines.get(i).display();
  }
  for (int i = 1; i < leds.size(); i++) {
    leds.get(i).display();
  }
  for (int i = 1; i < mega64s.size(); i++) {
    mega64s.get(i).display();
  }
  for (int i = 1; i < movings.size(); i++) {
    movings.get(i).display();
  }
  for (int i = 1; i < par12s.size(); i++) {
    par12s.get(i).display();
  }
  for (int i = 1; i < strobes.size(); i++) {
    strobes.get(i).display();
  }
  for (int i = 1; i < dekkers.size(); i++) {
    dekkers.get(i).display();
  }
  for (int i = 1; i < oldColorbars.size(); i++) {
    oldColorbars.get(i).display();
  }
  for (int i = 1; i < newColorbars.size(); i++) {
    newColorbars.get(i).display();
  }
  for (int i = 1; i < phantoms.size(); i++) {
    phantoms.get(i).display();
  }
  for (int i = 1; i < sceneSetters.size(); i++) {
    sceneSetters.get(i).display();
  }
  for (int i = 1; i < miniDesks.size(); i++) {
    miniDesks.get(i).display();
  }
  for (int i = 1; i < ePar38s.size(); i++) {
    ePar38s.get(i).display();
  }
  for (int i = 1; i < led38Bs.size(); i++) {
    led38Bs.get(i).display();
  }
  for (int i = 1; i < flatPars.size(); i++) {
    flatPars.get(i).display();
  }
  for (int i = 1; i < bk75s.size(); i++) {
    bk75s.get(i).display();
  }
  for (int i = 1; i < par20s.size(); i++) {
    par20s.get(i).display();
  }
  for (int i = 1; i < par30s.size(); i++) {
    par30s.get(i).display();
  }
  for (int i = 1; i <  par46s.size(); i++) {
    par46s.get(i).display();
  }
  for (int i = 1; i <  bolds.size(); i++) {
    bolds.get(i).display();
  }
  for (int i = 1; i <  dimmerPacks.size(); i++) {
    dimmerPacks.get(i).display();
  }
}
boolean Single = true, Double = false, Quattro = false, Remove = false, Replace = false;

int rotate = 0, orotate = 0;
boolean keyPressing = false;
int putsize = 1;
float ox, oy, m1x, m2x, m1y, m2y, x, y;
float x1, x2, x3, x4, y1, y2, y3, y4;
int linePhase = 0;

public void SizeButton() {
  stroke(0);
  rectMode(CENTER);
  fill(255);
  if (standing || objecting)rect(width-15, 120, 20, 15);
  if (standing || objecting)rect(width-15, 140, 20, 15);
  if (standing || objecting)rect(width-15, 160, 20, 15);
  rect(width-15, 180, 20, 15);
  rect(width-15, 200, 20, 15);
  textSize(15);
  fill(0);
  if (standing || objecting)text("Single", width-50, 120);
  if (standing || objecting)text("Double", width-50, 140);
  if (standing || objecting)text("Quattro", width-50, 160);
  text("Remove", width-50, 180);
  text("Replace", width-50, 200);

  if (Single && (standing || objecting)) {
    fill(0, 100);
    rect(width-15, 120, 20, 15);
  }
  if (Double && (standing || objecting)) {
    fill(0, 100);
    rect(width-15, 140, 20, 15);
  }
  if (Quattro && (standing || objecting)) {
    fill(0, 100);
    rect(width-15, 160, 20, 15);
  }
  if (Remove) {
    fill(0, 100);
    rect(width-15, 180, 20, 15);
    cTable = false;
    cStand = false;
    cTruss = false;
    cLed = false;
    cMega64 = false;
    cMoving = false;
    cPar12 = false;
    cStrobe = false;
    cDekker = false;
    cOld = false;
    cNew = false;
    cPhantom = false;
    cSceneSetter = false;
    cMini = false;
    cEPar38 = false;
    cLED38B = false;
    cFlatPar = false;
    cBk75 = false;
    cPar20 = false;
    cPar30 = false;
    cPar46 = false;
    cBold = false;
    cDimmerPack = false;
  }
  if (Replace) {
    fill(0, 100);
    rect(width-15, 200, 20, 15);
    cTable = false;
    cStand = false;
    cTruss = false;
    cLed = false;
    cMega64 = false;
    cMoving = false;
    cPar12 = false;
    cStrobe = false;
    cDekker = false;
    cOld = false;
    cNew = false;
    cPhantom = false;
    cSceneSetter = false;
    cMini = false;
    cEPar38 = false;
    cLED38B = false;
    cFlatPar = false;
    cBk75 = false;
    cPar20 = false;
    cPar30 = false;
    cPar46 = false;
    cBold = false;
    cDimmerPack = false;
  }

  if (width-15-20 < mouseX && mouseX < width-15+20 && mousePressed) {
    if (120-15 < mouseY && mouseY < 120+15) {
      Single = true;
      Double = false;
      Quattro = false;
      putsize = 1;
    }
    if (140-15 < mouseY && mouseY < 140+15) {
      Single = false;
      Double = true;
      Quattro = false;
      putsize = 2;
    }
    if (160-15 < mouseY && mouseY < 160+15) {
      Single = false;
      Double = false;
      Quattro = true;
      putsize = 4;
    }
    if (180-15 < mouseY && mouseY < 180+15 && click) {
      Remove = !Remove;
      Replace = false;
    }
    if (200-15 < mouseY && mouseY < 200+15 && click) {
      Replace = !Replace;
      Remove = false;
    }
  }
}

public void AddObjects() {
  if (!keyPressing && keyPressed && (key == 'r' || key == 'R')) {
    if (rotate != 11)rotate++;
    else rotate = 0;
  }
  if (keyPressed)keyPressing = true;
  else keyPressing=false;


  if (width/10 + width/5/2 < mouseX && mouseX < width && 50+50 < mouseY && mouseY < 550 - 50) {

    stroke(255, 0, 0);
    if ((width/10+width/5/2+width)/2 - 10 < mouseX && mouseX < (width/10+width/5/2+width)/2 + 10) {
      ox = (width/10+width/5/2+width)/2;
      line((width/10+width/5/2+width)/2, 50+50, (width/10+width/5/2+width)/2, 550-50);
    } else {
      ox = mouseX;
    }

    oy = mouseY;


    drawVerticalLines(leds);
    drawVerticalLines(mega64s);
    drawVerticalLines(movings);
    drawVerticalLines(par12s);
    drawVerticalLines(strobes);
    drawVerticalLines(dekkers);
    drawVerticalLines(oldColorbars);
    drawVerticalLines(newColorbars);
    drawVerticalLines(phantoms);
    drawVerticalLines(sceneSetters);
    drawVerticalLines(miniDesks);
    drawVerticalLines(ePar38s);
    drawVerticalLines(led38Bs);
    drawVerticalLines(flatPars);
    drawVerticalLines(bk75s);
    drawVerticalLines(par20s);
    drawVerticalLines(par30s);
    drawVerticalLines(par46s);
    drawVerticalLines(bolds);
    drawVerticalLines(dimmerPacks);
    drawVerticalLines(tables);
    drawVerticalLines(stands);
    drawVerticalLines(trusses);

    smartGuides(stands);
    smartGuides(trusses);

    stroke(0);


    x = ox*cos(-rotate * 2*PI/12) - oy*sin(-rotate * 2*PI/12);
    y = ox*sin(-rotate * 2*PI/12) + oy*cos(-rotate * 2*PI/12);

    orotate = rotate;


    for (int i = 0; i < putsize; i++) {
      if (putsize == 2) {
        if (i == 1) {
          rotate = 12 - rotate;
          x = ((width/10+width/5/2+width)/2 - (ox - (width/10+width/5/2+width)/2))*cos(-rotate * 2*PI/12) - oy*sin(-rotate * 2*PI/12);
          y = ((width/10+width/5/2+width)/2 - (ox - (width/10+width/5/2+width)/2))*sin(-rotate * 2*PI/12) + oy*cos(-rotate * 2*PI/12);
        }
      } else if (putsize == 4) {
        if (i == 1) {
          x = ((width/10+width/5/2+width)/2 + (ox - (width/10+width/5/2+width)/2)/3)*cos(-rotate * 2*PI/12) - oy*sin(-rotate * 2*PI/12);
          y = ((width/10+width/5/2+width)/2 + (ox - (width/10+width/5/2+width)/2)/3)*sin(-rotate * 2*PI/12) + oy*cos(-rotate * 2*PI/12);
        }
        if (i == 2) {
          rotate = 12 - rotate;
          x = ((width/10+width/5/2+width)/2 - (ox - (width/10+width/5/2+width)/2)/3)*cos(-rotate * 2*PI/12) - oy*sin(-rotate * 2*PI/12);
          y = ((width/10+width/5/2+width)/2 - (ox - (width/10+width/5/2+width)/2)/3)*sin(-rotate * 2*PI/12) + oy*cos(-rotate * 2*PI/12);
        }
        if (i == 3) {
          rotate = 12 - rotate;
          x = ((width/10+width/5/2+width)/2 - (ox - (width/10+width/5/2+width)/2))*cos(-rotate * 2*PI/12) - oy*sin(-rotate * 2*PI/12);
          y = ((width/10+width/5/2+width)/2 - (ox - (width/10+width/5/2+width)/2))*sin(-rotate * 2*PI/12) + oy*cos(-rotate * 2*PI/12);
        }
      }

      if (width - 15 - 20 > mouseX || mouseX > width - 15 + 20 || 120 - 15 > mouseY || mouseY > 160 + 15) {
        if (cTable) {
          new RectEquipment(x, y, size * 5.33f, size * 2.67f, color(255, 255, 255), rotate).display();
          if (mousePressed) addTables(x, y, rotate);
        }
        if (cStand) {
          new RectEquipment(x, y, size * 12, size * 1.33f, color(0, 0, 0), rotate).display();
          if (mousePressed) addStands(x, y, rotate);
        }
        if (cTruss) {
          new RectEquipment(x, y, size * 12, size * 1.33f, color(100, 100, 100), rotate).display();
          if (mousePressed) addTrusses(x, y, rotate);
        }
        if (cLed) {
          new CircleEquipment(x, y, size, color(255, 165, 0), rotate).display();
          if (mousePressed) addLeds(x, y, rotate);
        }
        if (cMega64) {
          new CircleEquipment(x, y, size, color(255, 69, 0), rotate).display();
          if (mousePressed) addMega64s(x, y, rotate);
        }
        if (cMoving) {
          new CircleEquipment(x, y, size, color(0, 191, 255), rotate).display();
          if (mousePressed) addMovings(x, y, rotate);
        }
        if (cPar12) {
          new CircleEquipment(x, y, size, color(50, 205, 50), rotate).display();
          if (mousePressed) addPar12s(x, y, rotate);
        }
        if (cStrobe) {
          new RectEquipment(x, y, size * 2.67f, size * 1.33f, color(135, 206, 235), rotate).display();
          if (mousePressed) addStrobes(x, y, rotate);
        }
        if (cDekker) {
          new PolygonEquipment(x, y,
            new float[]{-size, -size, size, size, size * 0.5f, -size * 0.5f},
            new float[]{-size * 0.5f, size * 0.5f, size * 0.5f, -size * 0.5f, -size, -size},
            color(255, 105, 180), rotate).display();
          if (mousePressed) addDekkers(x, y, rotate);
        }
        if (cOld) {
          new RectEquipment(x, y, size * 2.67f, size * 0.67f, color(240, 255, 255), rotate).display();
          if (mousePressed) addOldColorbars(x, y, rotate);
        }
        if (cNew) {
          new RectEquipment(x, y, size * 2.67f, size * 0.67f, color(255, 165, 0), rotate).display();
          if (mousePressed) addNewColorbars(x, y, rotate);
        }
        if (cPhantom) {
          new RectEquipment(x, y, size * 4, size * 2, color(255, 20, 147), rotate).display();
          if (mousePressed) addPhantoms(x, y, rotate);
        }
        if (cSceneSetter) {
          new RectEquipment(x, y, size * 4, size * 2, color(0, 0, 255), rotate).display();
          if (mousePressed) addSceneSetters(x, y, rotate);
        }
        if (cMini) {
          new RectEquipment(x, y, size * 4, size * 2, color(255, 69, 0), rotate).display();
          if (mousePressed) addMiniDesks(x, y, rotate);
        }
        if (cEPar38) {
          new CircleEquipment(x, y, size, color(0, 255, 255), rotate).display();
          if (mousePressed) addEPar38s(x, y, rotate);
        }
        if (cLED38B) {
          new CircleEquipment(x, y, size, color(255, 255, 0), rotate).display();
          if (mousePressed) addLed38Bs(x, y, rotate);
        }
        if (cFlatPar) {
          new CircleEquipment(x, y, size, color(65, 105, 225), rotate).display();
          if (mousePressed) addFlatPars(x, y, rotate);
        }
        if (cBk75) {
          new CircleEquipment(x, y, size, color(255, 192, 203), rotate).display();
          if (mousePressed) addBk75s(x, y, rotate);
        }
        if (cPar20) {
          new RectEquipment(x, y, size*2, size*2, color(255, 165, 0), rotate).display();
          if (mousePressed) addPar20s(x, y, rotate);
        }
        if (cPar30) {
          new RectEquipment(x, y, size*2, size*2, color(255, 69, 0), rotate).display();
          if (mousePressed) addPar30s(x, y, rotate);
        }
        if (cPar46) {
          new RectEquipment(x, y, size*2, size*2, color(0, 191, 255), rotate).display();
          if (mousePressed) addPar46s(x, y, rotate);
        }
        if (cBold) {
          new RectEquipment(x, y, size * 4, size * 2, color(138, 43, 226), rotate).display();
          if (mousePressed) addBolds(x, y, rotate);
        }
        if (cDimmerPack) {
          new RectEquipment(x, y, size * 2, size * 2.5f, color(215, 215, 215), rotate).display();
          if (mousePressed) addDimmerPacks(x, y, rotate);
        }
      }
      if (orotate != rotate)rotate = orotate;
    }
  }
  SizeButton();
  if (mousePressed)rotate = 0;
}

public void AddLines() {
  if (width/10 + width/5/2 < mouseX && mouseX < width && 50+50 < mouseY && mouseY < 550 - 50) {
    if (cSingleLine) {
      switch(linePhase) {
      case 0:
        x1 = ox;
        y1 = oy;
        ellipse(ox, oy, 3, 3);
        if (click) {
          linePhase = 1;
          keepSingleLine = true;
        }
        break;
      default:
        x2 = ox;
        y2 = oy;
        new JustLine(x1, y1, x2, y2, color(0, 0, 0)).display();
        if (click) {
          linePhase = 0;
          addJustLines(x1, y1, x2, y2, color(0, 0, 0));
          keepSingleLine = true;
        }
        break;
      }
    }

    if (cLshaped) {
      switch(linePhase) {
      case 0:
        x1 = ox;
        y1 = oy;
        ellipse(ox, oy, 3, 3);
        if (click) {
          linePhase = 1;
          keepLshaped = true;
        }
        break;
      case 1:
        x2 = ox;
        y2 = oy;
        m1x = x2;
        m1y = y1;
        new LLine(x1, y1, x2, y2, m1x, m1y, color(0, 0, 0)).display();
        if (click) linePhase = 2;
        break;
      default:
        if (y1 < y2) {
          float tmp;
          tmp = x1;
          x1 = x2;
          x2 = tmp;
          tmp = y1;
          y1 = y2;
          y2 = tmp;
        }
        if (oy <= ((y1 - y2)/(x1 - x2)) * (ox - x1) + y1) {
          m1x = x1;
          m1y = y2;
        } else {
          m1x = x2;
          m1y = y1;
        }
        new LLine(x1, y1, x2, y2, m1x, m1y, color(0, 0, 0)).display();
        if (click) {
          linePhase = 0;
          addLLines(x1, y1, x2, y2, m1x, m1y, color(0, 0, 0));
          keepLshaped = true;
        }
        break;
      }
    }

    if (cHorizontal) {
      switch(linePhase) {
      case 0:
        x1 = ox;
        y1 = oy;
        ellipse(ox, oy, 3, 3);
        if (click) {
          linePhase = 1;
          keepHorizontal = true;
        }
        break;
      case 1:
        x2 = ox;
        y2 = oy;
        m1x = x1;
        m1y = (y1 + y2)/2;
        m2x = x2;
        m2y = (y1 + y2)/2;
        new BracketLine(x1, y1, x2, y2, m1x, m1y, m2x, m2y, color(0, 0, 0)).display();
        if (click) linePhase = 2;
        break;
      default:
        m1y = oy;
        m2y = oy;
        new BracketLine(x1, y1, x2, y2, m1x, m1y, m2x, m2y, color(0, 0, 0)).display();
        if (click) {
          linePhase = 0;
          addBracketLines(x1, y1, x2, y2, m1x, m1y, m2x, m2y, color(0, 0, 0));
          keepHorizontal = true;
        }
        break;
      }
    }

    if (cVertical) {
      switch(linePhase) {
      case 0:
        x1 = ox;
        y1 = oy;
        ellipse(ox, oy, 3, 3);
        if (click) {
          linePhase = 1;
          keepVertical = true;
        }
        break;
      case 1:
        x2 = ox;
        y2 = oy;
        m1x = (x1 + x2)/2;
        m1y = y1;
        m2x = (x1 + x2)/2;
        m2y = y2;
        new BracketLine(x1, y1, x2, y2, m1x, m1y, m2x, m2y, color(0, 0, 0)).display();
        if (click) linePhase = 2;
        break;
      default:
        m1x = ox;
        m2x = ox;
        new BracketLine(x1, y1, x2, y2, m1x, m1y, m2x, m2y, color(0, 0, 0)).display();
        if (click) {
          linePhase = 0;
          addBracketLines(x1, y1, x2, y2, m1x, m1y, m2x, m2y, color(0, 0, 0));
          keepVertical = true;
        }
        break;
      }
    }
  } else if (mousePressed) {
    keepSingleLine = cSingleLine = false;
    keepLshaped = cLshaped = false;
    keepHorizontal = cHorizontal = false;
    keepVertical = cVertical = false;
    linePhase = 0;
  }
}
public void changeLineType() {
  if (mousePressed) {
    if (c1m) {
      changeLineColor(justLines, color(255, 0, 0));
      changeLineColor(lLines, color(255, 0, 0));
      changeLineColor(bracketLines, color(255, 0, 0));
    }
    if (c2m) {
      changeLineColor(justLines, color(200, 0, 255));
      changeLineColor(lLines, color(200, 0, 255));
      changeLineColor(bracketLines, color(200, 0, 255));
    }
    if (c3m) {
      changeLineColor(justLines, color(0, 255, 255));
      changeLineColor(lLines, color(0, 255, 255));
      changeLineColor(bracketLines, color(0, 255, 255));
    }
    if (c5m) {
      changeLineColor(justLines, color(255, 130, 0));
      changeLineColor(lLines, color(255, 130, 0));
      changeLineColor(bracketLines, color(255, 130, 0));
    }
    if (c10m) {
      changeLineColor(justLines, color(0, 255, 0));
      changeLineColor(lLines, color(0, 255, 0));
      changeLineColor(bracketLines, color(0, 255, 0));
    }
    if (c15m) {
      changeLineColor(justLines, color(0, 0, 255));
      changeLineColor(lLines, color(0, 0, 255));
      changeLineColor(bracketLines, color(0, 0, 255));
    }
    if (cpower) {
      changeLineColor(justLines, color(0));
      changeLineColor(lLines, color(0));
      changeLineColor(bracketLines, color(0));
    }
  }
  stroke(0);
}

public void changeLineColor(ArrayList<Line> Lines, int c) {
  if (touchLine(Lines) != -1)Lines.get(touchLine(Lines)).c = c;
}
boolean saving;
public void choseOperation() {
  fill(255);
  rect(width/2, height/2, 600, 150);
  rect(width/2-200, height/2+40, 180, 50);
  rect(width/2, height/2+40, 180, 50);
  rect(width/2+200, height/2+40, 180, 50);
  fill(0);
  text("Chose Operation", width/2, height/2-40);
  text("Open Project", width/2-200, height/2+40);
  text("Save Project", width/2, height/2+40);
  text("Save Location", width/2+200, height/2+40);
  if(click){
    if(width/2-200-90 <= mouseX && mouseX <= width/2-200+90 && height/2+40-25 <= mouseY && mouseY <= height/2+40+25)openProject();
    if(width/2-90 <= mouseX && mouseX <= width/2+90 && height/2+40-25 <= mouseY && mouseY <= height/2+40+25)saveProject();
    if(width/2+200-90 <= mouseX && mouseX <= width/2+200+90 && height/2+40-25 <= mouseY && mouseY <= height/2+40+25){
      fileing = false;
      saving = true;
    }
  }
}
boolean makeTable;
public void dispose() {
  println(makeTable);
}
public void openProject() {
  String filePath = selectFile();  // ファイル選択ダイアログを開く
  if (filePath != null) {
    JSONObject projectData = loadJSONObject(filePath);  // JSONファイルを読み込む
    for (int i = 1; i < projectData.getInt("led"); i++) {
      addLeds(projectData.getFloat("ledX"+i), projectData.getFloat("ledY"+i), projectData.getInt("ledR"+i));
    }
    for (int i = 1; i < projectData.getInt("mega64"); i++) {
      addMega64s(projectData.getFloat("mega64X"+i), projectData.getFloat("mega64Y"+i), projectData.getInt("mega64R"+i));
    }
    for (int i = 1; i < projectData.getInt("moving"); i++) {
      addMovings(projectData.getFloat("movingX"+i), projectData.getFloat("movingY"+i), projectData.getInt("movingR"+i));
    }
    for (int i = 1; i < projectData.getInt("par12"); i++) {
      addPar12s(projectData.getFloat("par12X"+i), projectData.getFloat("par12Y"+i), projectData.getInt("par12R"+i));
    }
    for (int i = 1; i < projectData.getInt("strobe"); i++) {
      addStrobes(projectData.getFloat("strobeX"+i), projectData.getFloat("strobeY"+i), projectData.getInt("strobeR"+i));
    }
    for (int i = 1; i < projectData.getInt("dekker"); i++) {
      addDekkers(projectData.getFloat("dekkerX"+i), projectData.getFloat("dekkerY"+i), projectData.getInt("dekkerR"+i));
    }
    for (int i = 1; i < projectData.getInt("oldColorbar"); i++) {
      addOldColorbars(projectData.getFloat("oldColorbarX"+i), projectData.getFloat("oldColorbarY"+i), projectData.getInt("oldColorbarR"+i));
    }
    for (int i = 1; i < projectData.getInt("newColorbar"); i++) {
      addNewColorbars(projectData.getFloat("newColorbarX"+i), projectData.getFloat("newColorbarY"+i), projectData.getInt("newColorbarR"+i));
    }
    for (int i = 1; i < projectData.getInt("phantom"); i++) {
      addPhantoms(projectData.getFloat("phantomX"+i), projectData.getFloat("phantomY"+i), projectData.getInt("phantomR"+i));
    }
    for (int i = 1; i < projectData.getInt("sceneSetter"); i++) {
      addSceneSetters(projectData.getFloat("sceneSetterX"+i), projectData.getFloat("sceneSetterY"+i), projectData.getInt("sceneSetterR"+i));
    }
    for (int i = 1; i < projectData.getInt("miniDesk"); i++) {
      addMiniDesks(projectData.getFloat("miniDeskX"+i), projectData.getFloat("miniDeskY"+i), projectData.getInt("miniDeskR"+i));
    }
    for (int i = 1; i < projectData.getInt("ePar38"); i++) {
      addEPar38s(projectData.getFloat("ePar38X"+i), projectData.getFloat("ePar38Y"+i), projectData.getInt("ePar38R"+i));
    }
    for (int i = 1; i < projectData.getInt("led38B"); i++) {
      addLed38Bs(projectData.getFloat("led38BX"+i), projectData.getFloat("led38BY"+i), projectData.getInt("led38BR"+i));
    }
    for (int i = 1; i < projectData.getInt("flatPar"); i++) {
      addFlatPars(projectData.getFloat("flatParX"+i), projectData.getFloat("flatParY"+i), projectData.getInt("flatParR"+i));
    }
    for (int i = 1; i < projectData.getInt("bk75"); i++) {
      addBk75s(projectData.getFloat("bk75X"+i), projectData.getFloat("bk75Y"+i), projectData.getInt("bk75R"+i));
    }
    for (int i = 1; i < projectData.getInt("par20"); i++) {
      addPar20s(projectData.getFloat("par20X"+i), projectData.getFloat("par20Y"+i), projectData.getInt("par20R"+i));
    }
    for (int i = 1; i < projectData.getInt("par30"); i++) {
      addPar30s(projectData.getFloat("par30X"+i), projectData.getFloat("par30Y"+i), projectData.getInt("par30R"+i));
    }
    for (int i = 1; i < projectData.getInt("par46"); i++) {
      addPar46s(projectData.getFloat("par46X"+i), projectData.getFloat("par46Y"+i), projectData.getInt("par46R"+i));
    }
    for (int i = 1; i < projectData.getInt("bold"); i++) {
      addBolds(projectData.getFloat("boldX"+i), projectData.getFloat("boldY"+i), projectData.getInt("boldR"+i));
    }
    for (int i = 1; i < projectData.getInt("dimmerPack"); i++) {
      addDimmerPacks(projectData.getFloat("dimmerpackX"+i), projectData.getFloat("dimmerpackY"+i), projectData.getInt("dimmerpackR"+i));
    }
    for (int i = 1; i < projectData.getInt("table"); i++) {
      addTables(projectData.getFloat("tableX"+i), projectData.getFloat("tableY"+i), projectData.getInt("tableR"+i));
    }
    for (int i = 1; i < projectData.getInt("stand"); i++) {
      addStands(projectData.getFloat("standX"+i), projectData.getFloat("standY"+i), projectData.getInt("standR"+i));
    }
    for (int i = 1; i < projectData.getInt("truss"); i++) {
      addTrusses(projectData.getFloat("trussX"+i), projectData.getFloat("trussY"+i), projectData.getInt("trussR"+i));
    }
    for (int i = 1; i < projectData.getInt("justLine"); i++) {
      addJustLines(projectData.getFloat("justLineSX"+i), projectData.getFloat("justLineSY"+i), projectData.getFloat("justLineEX"+i), projectData.getFloat("justLineEY"+i), projectData.getInt("justLineC"+i));
    }
    for (int i = 1; i < projectData.getInt("lLine"); i++) {
      addLLines(projectData.getFloat("lLineSX"+i), projectData.getFloat("lLineSY"+i), projectData.getFloat("lLineEX"+i), projectData.getFloat("lLineEY"+i), projectData.getFloat("lLineMX"+i), projectData.getFloat("lLineMY"+i), projectData.getInt("lLineC"+i));
    }
    for (int i = 2; i < projectData.getInt("bracketLine"); i++) {
      addBracketLines(projectData.getFloat("bracketLineSX"+i), projectData.getFloat("bracketLineSY"+i), projectData.getFloat("bracketLineEX"+i), projectData.getFloat("bracketLineEY"+i), projectData.getFloat("bracketLineM1X"+i), projectData.getFloat("bracketLineM1Y"+i), projectData.getFloat("bracketLineM2X"+i), projectData.getFloat("bracketLineM2Y"+i), projectData.getInt("bracketLineC"+i));
    }
  }
  fileing = false;
  standing = true;
}

public String selectFile() {
  JFileChooser fileChooser = new JFileChooser();
  int returnValue = fileChooser.showOpenDialog(null);
  if (returnValue == JFileChooser.APPROVE_OPTION) {
    return fileChooser.getSelectedFile().getPath();  // ファイルのパスを返す
  } else {
    //println("No file selected");
    return null;
  }
}

public void saveProject() {
  // JFileChooserを使って保存ダイアログを表示
  JFileChooser fileChooser = new JFileChooser();
  fileChooser.setDialogTitle("保存場所とファイル名を指定してください");

  // デフォルトの保存形式はPNGとする
  fileChooser.setSelectedFile(new File("project.json"));

  // ダイアログを表示して、ユーザーの選択を待つ
  int userSelection = fileChooser.showSaveDialog(null);

  if (userSelection == JFileChooser.APPROVE_OPTION) {
    // ユーザーが保存場所と名前を選んだ場合、そのパスを取得
    File fileToSave = fileChooser.getSelectedFile();

    JSONObject projectData = new JSONObject();

    saveJson(projectData);

    saveJSONObject(projectData, fileToSave.getAbsolutePath());

    //println("プロジェクトが保存されました: " + fileToSave.getAbsolutePath());
  } else {
    //println("保存がキャンセルされました");
  }

  fileing = false;
  standing = true;
}

public void saveJson(JSONObject projectData) {    // プロジェクトを指定されたファイル名で保存
  projectData.setInt("led", leds.size());
  for (int i = 1; i < leds.size(); i++) {
    projectData.setFloat("ledX"+i, leds.get(i).x);
    projectData.setFloat("ledY"+i, leds.get(i).y);
    projectData.setInt("ledR"+i, leds.get(i).r);
  }
  projectData.setInt("mega64", mega64s.size());
  for (int i = 1; i < mega64s.size(); i++) {
    projectData.setFloat("mega64X"+i, mega64s.get(i).x);
    projectData.setFloat("mega64Y"+i, mega64s.get(i).y);
    projectData.setInt("mega64R"+i, mega64s.get(i).r);
  }
  projectData.setInt("moving", movings.size());
  for (int i = 1; i < movings.size(); i++) {
    projectData.setFloat("movingX"+i, movings.get(i).x);
    projectData.setFloat("movingY"+i, movings.get(i).y);
    projectData.setInt("movingR"+i, movings.get(i).r);
  }
  projectData.setInt("par12", par12s.size());
  for (int i = 1; i < par12s.size(); i++) {
    projectData.setFloat("par12X"+i, par12s.get(i).x);
    projectData.setFloat("par12Y"+i, par12s.get(i).y);
    projectData.setInt("par12R"+i, par12s.get(i).r);
  }
  projectData.setInt("strobe", strobes.size());
  for (int i = 1; i < strobes.size(); i++) {
    projectData.setFloat("strobeX"+i, strobes.get(i).x);
    projectData.setFloat("strobeY"+i, strobes.get(i).y);
    projectData.setInt("strobeR"+i, strobes.get(i).r);
  }
  projectData.setInt("dekker", dekkers.size());
  for (int i = 1; i < dekkers.size(); i++) {
    projectData.setFloat("dekkerX"+i, dekkers.get(i).x);
    projectData.setFloat("dekkerY"+i, dekkers.get(i).y);
    projectData.setInt("dekkerR"+i, dekkers.get(i).r);
  }
  projectData.setInt("oldColorbar", oldColorbars.size());
  for (int i = 1; i < oldColorbars.size(); i++) {
    projectData.setFloat("oldColorbarX"+i, oldColorbars.get(i).x);
    projectData.setFloat("oldColorbarY"+i, oldColorbars.get(i).y);
    projectData.setInt("oldColorbarR"+i, oldColorbars.get(i).r);
  }
  projectData.setInt("newColorbar", newColorbars.size());
  for (int i = 1; i < newColorbars.size(); i++) {
    projectData.setFloat("newColorbarX"+i, newColorbars.get(i).x);
    projectData.setFloat("newColorbarY"+i, newColorbars.get(i).y);
    projectData.setInt("newColorbarR"+i, newColorbars.get(i).r);
  }
  projectData.setInt("phantom", phantoms.size());
  for (int i = 1; i < phantoms.size(); i++) {
    projectData.setFloat("phantomX"+i, phantoms.get(i).x);
    projectData.setFloat("phantomY"+i, phantoms.get(i).y);
    projectData.setInt("phantomR"+i, phantoms.get(i).r);
  }
  projectData.setInt("sceneSetter", sceneSetters.size());
  for (int i = 1; i < sceneSetters.size(); i++) {
    projectData.setFloat("sceneSetterX"+i, sceneSetters.get(i).x);
    projectData.setFloat("sceneSetterY"+i, sceneSetters.get(i).y);
    projectData.setInt("sceneSetterR"+i, sceneSetters.get(i).r);
  }
  projectData.setInt("miniDesk", miniDesks.size());
  for (int i = 1; i < miniDesks.size(); i++) {
    projectData.setFloat("miniDeskX"+i, miniDesks.get(i).x);
    projectData.setFloat("miniDeskY"+i, miniDesks.get(i).y);
    projectData.setInt("miniDeskR"+i, miniDesks.get(i).r);
  }
  projectData.setInt("ePar38", ePar38s.size());
  for (int i = 1; i < ePar38s.size(); i++) {
    projectData.setFloat("ePar38X"+i, ePar38s.get(i).x);
    projectData.setFloat("ePar38Y"+i, ePar38s.get(i).y);
    projectData.setInt("ePar38R"+i, ePar38s.get(i).r);
  }
  projectData.setInt("led38B", led38Bs.size());
  for (int i = 1; i < led38Bs.size(); i++) {
    projectData.setFloat("led38BX"+i, led38Bs.get(i).x);
    projectData.setFloat("led38BY"+i, led38Bs.get(i).y);
    projectData.setInt("led38BR"+i, led38Bs.get(i).r);
  }
  projectData.setInt("flatPar", flatPars.size());
  for (int i = 1; i < flatPars.size(); i++) {
    projectData.setFloat("flatParX"+i, flatPars.get(i).x);
    projectData.setFloat("flatParY"+i, flatPars.get(i).y);
    projectData.setInt("flatParR"+i, flatPars.get(i).r);
  }
  projectData.setInt("bk75", bk75s.size());
  for (int i = 1; i < bk75s.size(); i++) {
    projectData.setFloat("bk75X"+i, bk75s.get(i).x);
    projectData.setFloat("bk75Y"+i, bk75s.get(i).y);
    projectData.setInt("bk75R"+i, bk75s.get(i).r);
  }
  projectData.setInt("par20", par20s.size());
  for (int i = 1; i < par20s.size(); i++) {
    projectData.setFloat("par20X"+i, par20s.get(i).x);
    projectData.setFloat("par20Y"+i, par20s.get(i).y);
    projectData.setInt("par20R"+i, par20s.get(i).r);
  }
  projectData.setInt("par30", par30s.size());
  for (int i = 1; i < par30s.size(); i++) {
    projectData.setFloat("par30X"+i, par30s.get(i).x);
    projectData.setFloat("par30Y"+i, par30s.get(i).y);
    projectData.setInt("par30R"+i, par30s.get(i).r);
  }
  projectData.setInt("par46", par46s.size());
  for (int i = 1; i < par46s.size(); i++) {
    projectData.setFloat("par46X"+i, par46s.get(i).x);
    projectData.setFloat("par46Y"+i, par46s.get(i).y);
    projectData.setInt("par46R"+i, par46s.get(i).r);
  }
  projectData.setInt("bold", bolds.size());
  for (int i = 1; i < bolds.size(); i++) {
    projectData.setFloat("boldX"+i, bolds.get(i).x);
    projectData.setFloat("boldY"+i, bolds.get(i).y);
    projectData.setInt("boldR"+i, bolds.get(i).r);
  }
  projectData.setInt("dimmerPack", dimmerPacks.size());
  for (int i = 1; i < dimmerPacks.size(); i++) {
    projectData.setFloat("dimmerpackX"+i, dimmerPacks.get(i).x);
    projectData.setFloat("dimmerpackY"+i, dimmerPacks.get(i).y);
    projectData.setInt("dimmerpackR"+i, dimmerPacks.get(i).r);
  }
  projectData.setInt("table", tables.size());
  for (int i = 1; i < tables.size(); i++) {
    projectData.setFloat("tableX"+i, tables.get(i).x);
    projectData.setFloat("tableY"+i, tables.get(i).y);
    projectData.setInt("tableR"+i, tables.get(i).r);
  }
  projectData.setInt("stand", stands.size());
  for (int i = 1; i < stands.size(); i++) {
    projectData.setFloat("standX"+i, stands.get(i).x);
    projectData.setFloat("standY"+i, stands.get(i).y);
    projectData.setInt("standR"+i, stands.get(i).r);
  }
  projectData.setInt("truss", trusses.size());
  for (int i = 1; i < trusses.size(); i++) {
    projectData.setFloat("trussX"+i, trusses.get(i).x);
    projectData.setFloat("trussY"+i, trusses.get(i).y);
    projectData.setInt("trussR"+i, trusses.get(i).r);
  }
  projectData.setInt("justLine", justLines.size());
  for (int i = 1; i < justLines.size(); i++) {
    projectData.setFloat("justLineSX"+i, justLines.get(i).sx);
    projectData.setFloat("justLineSY"+i, justLines.get(i).sy);
    projectData.setFloat("justLineEX"+i, justLines.get(i).ex);
    projectData.setFloat("justLineEY"+i, justLines.get(i).ey);
    projectData.setInt("justLineC"+i, justLines.get(i).c);
  }
  projectData.setInt("lLine", lLines.size());
  for (int i = 1; i < lLines.size(); i++) {
    LLine Llines = (LLine) lLines.get(i);
    projectData.setFloat("lLineSX"+i, Llines.sx);
    projectData.setFloat("lLineSY"+i, Llines.sy);
    projectData.setFloat("lLineEX"+i, Llines.ex);
    projectData.setFloat("lLineEY"+i, Llines.ey);
    projectData.setFloat("lLineMX"+i, Llines.mx);
    projectData.setFloat("lLineMY"+i, Llines.my);
    projectData.setInt("lLineC"+i, Llines.c);
  }
  projectData.setInt("bracketLine", bracketLines.size());
  for (int i = 2; i < bracketLines.size(); i++) {
    BracketLine Bracketlines = (BracketLine) bracketLines.get(i);
    projectData.setFloat("bracketLineSX"+i, Bracketlines.sx);
    projectData.setFloat("bracketLineSY"+i, Bracketlines.sy);
    projectData.setFloat("bracketLineEX"+i, Bracketlines.ex);
    projectData.setFloat("bracketLineEY"+i, Bracketlines.ey);
    projectData.setFloat("bracketLineM1X"+i, Bracketlines.m1x);
    projectData.setFloat("bracketLineM1Y"+i, Bracketlines.m1y);
    projectData.setFloat("bracketLineM2X"+i, Bracketlines.m2x);
    projectData.setFloat("bracketLineM2Y"+i, Bracketlines.m2y);
    projectData.setInt("bracketLineC"+i, Bracketlines.c);
  }
}

public void saveLocation() {
  JSONObject projectData = new JSONObject();
  saveJson(projectData);
  saveJSONObject(projectData, "project_data.json");
  SaveImage();
  fill(255);
  rect(width/2, height/2, 600, 150);
  rect(width/2-250/2, height/2+40, 200, 50);
  rect(width/2+250/2, height/2+40, 200, 50);
  fill(0);
  text("LicationSaveComplete. SaveProjectAlso?", width/2, height/2-40);
  text("Yes", width/2-250/2, height/2+40);
  text("No", width/2+250/2, height/2+40);
  if (click) {
    if (width/2-250/2-100 <= mouseX && mouseX <= width/2-250/2+100 && height/2+40-25 <= mouseY && mouseY <= height/2+40+25) {
      saveProject();
      fileing = false;
      standing = true;
      saving = false;
      makeTable = true;
      exit();
    }
    if (width/2+250/2-100 <= mouseX && mouseX <= width/2+250/2+100 && height/2+40-25 <= mouseY && mouseY <= height/2+40+25) {
      fileing = false;
      standing = true;
      saving = false;
      makeTable = true;
      exit();
    }
  }
}

public void SaveImage() {
  pushMatrix();
  background(255);
  translate(-width/5-1, -49);
  scale(1.17f);
  drawObject();
  save("image.png");
  popMatrix();
}
boolean table = false, stand = false, truss = false;
boolean par = false, deco = false, bar = false, desk = false, denkei = false, other = false;
boolean lineType = false, connect = false;

boolean cTable = false;
boolean cStand = false;
boolean cTruss = false;
boolean cLed = false, cMega64 = false, cMoving = false, cPar12 = false;
boolean cStrobe = false, cDekker = false;
boolean cOld = false, cNew = false;
boolean cPhantom = false, cSceneSetter = false, cMini = false;
boolean cEPar38 = false, cLED38B = false, cFlatPar = false, cBk75 = false, cPar20 = false, cPar30 = false, cPar46 = false;
boolean cBold = false, cDimmerPack = false;
boolean cSingleLine = false, cLshaped = false, cHorizontal = false, cVertical = false;
boolean keepSingleLine = false, keepLshaped = false, keepHorizontal = false, keepVertical = false;
boolean c1m = false, c2m = false, c3m = false, c5m = false, c10m = false, c15m = false, cpower = false;

public void lists() {
  tableList();
  standList();
  trussList();

  parList();
  decorationList();
  colorBarList();
  deskList();
  denkeiiList();
  otherList();

  lineTypeList();
  connectList();
}

public void parList() {
  if (mousePressed && !par && objecting && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && height/7-50-height/20<=mouseY && mouseY<=height/7-50+height/20) {
    par = true;
    deco = false;
    bar = false;
    desk = false;
    denkei = false;
    other = false;
  }
  if (par) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("LED", width/10+width/5, 25);
    text("MEGA64", width/10+2*width/5, 25);
    text("Moving", width/10+3*width/5, 25);
    text("Par12", width/10+4*width/5, 25);
    leds.get(0).display();
    mega64s.get(0).display();
    movings.get(0).display();
    par12s.get(0).display();
  }

  if (par && width/10+width/5-25<=mouseX && mouseX<=width/10+width/5+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cLed = true;
    } else if (!cLed) {
      fill(0, 0, 0, 20);
      rect(width/10+width/5, 50, 70, 80);
    }
  } else if (mousePressed) {
    cLed = false;
  }
  if (cLed) {
    fill(0, 0, 0, 20);
    rect(width/10+width/5, 50, 70, 80);
  }

  if (par && width/10+2*width/5-25<=mouseX && mouseX<=width/10+2*width/5+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cMega64 = true;
    } else if (!cMega64) {
      fill(0, 0, 0, 20);
      rect(width/10+2*width/5, 50, 70, 80);
    }
  } else if (mousePressed) {
    cMega64 = false;
  }
  if (cMega64) {
    fill(0, 0, 0, 20);
    rect(width/10+2*width/5, 50, 70, 80);
  }

  if (par && width/10+3*width/5-25<=mouseX && mouseX<=width/10+3*width/5+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cMoving = true;
    } else if (!cMoving) {
      fill(0, 0, 0, 20);
      rect(width/10+3*width/5, 50, 70, 80);
    }
  } else if (mousePressed) {
    cMoving = false;
  }
  if (cMoving) {
    fill(0, 0, 0, 20);
    rect(width/10+3*width/5, 50, 70, 80);
  }

  if (par && width/10+4*width/5-25<=mouseX && mouseX<=width/10+4*width/5+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cPar12 = true;
    } else if (!cPar12) {
      fill(0, 0, 0, 20);
      rect(width/10+4*width/5, 50, 70, 80);
    }
  } else if (mousePressed) {
    cPar12 = false;
  }
  if (cPar12) {
    fill(0, 0, 0, 20);
    rect(width/10+4*width/5, 50, 70, 80);
  }
}

public void decorationList() {
  if (mousePressed && !deco && objecting && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 2*height/7-50-height/20<=mouseY && mouseY<=2*height/7-50+height/20) {
    par = false;
    deco = true;
    bar = false;
    desk = false;
    denkei = false;
    other = false;
  }
  if (deco) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Strobe", width/10+width/3, 25);
    text("Dekker", width/10+2*width/3, 25);
    strobes.get(0).display();
    dekkers.get(0).display();
  }

  if (deco && width/10+width/3-25<=mouseX && mouseX<=width/10+width/3+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cStrobe = true;
    } else if (!cStrobe) {
      fill(0, 0, 0, 20);
      rect(width/10+width/3, 50, 70, 80);
    }
  } else if (mousePressed) {
    cStrobe = false;
  }
  if (cStrobe) {
    fill(0, 0, 0, 20);
    rect(width/10+width/3, 50, 70, 80);
  }

  if (deco && width/10+2*width/3-25<=mouseX && mouseX<=width/10+2*width/3+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cDekker = true;
    } else if (!cDekker) {
      fill(0, 0, 0, 20);
      rect(width/10+2*width/3, 50, 70, 80);
    }
  } else if (mousePressed) {
    cDekker = false;
  }
  if (cDekker) {
    fill(0, 0, 0, 20);
    rect(width/10+2*width/3, 50, 70, 80);
  }
}

public void colorBarList() {
  if (mousePressed && !bar && objecting && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 3*height/7-50-height/20<=mouseY && mouseY<=3*height/7-50+height/20) {
    par = false;
    deco = false;
    bar = true;
    desk = false;
    denkei = false;
    other = false;
  }
  if (bar) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Old", width/10+width/3, 25);
    text("New", width/10+2*width/3, 25);
    oldColorbars.get(0).display();
    newColorbars.get(0).display();
  }

  if (bar && width/10+width/3-25<=mouseX && mouseX<=width/10+width/3+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cOld = true;
    } else if (!cOld) {
      fill(0, 0, 0, 20);
      rect(width/10+width/3, 50, 70, 80);
    }
  } else if (mousePressed) {
    cOld = false;
  }
  if (cOld) {
    fill(0, 0, 0, 20);
    rect(width/10+width/3, 50, 70, 80);
  }

  if (bar && width/10+2*width/3-25<=mouseX && mouseX<=width/10+2*width/3+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cNew = true;
    } else if (!cNew) {
      fill(0, 0, 0, 20);
      rect(width/10+2*width/3, 50, 70, 80);
    }
  } else if (mousePressed) {
    cNew = false;
  }
  if (cNew) {
    fill(0, 0, 0, 20);
    rect(width/10+2*width/3, 50, 70, 80);
  }
}

public void deskList() {
  if (mousePressed && !desk && objecting && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 4*height/7-50-height/20<=mouseY && mouseY<=4*height/7-50+height/20) {
    par = false;
    deco = false;
    bar = false;
    desk = true;
    denkei = false;
    other = false;
  }
  if (desk) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Phantom", width/10+width/4, 25);
    text("SceneSetter", width/10+2*width/4, 25);
    text("Mini", width/10+3*width/4, 25);
    phantoms.get(0).display();
    sceneSetters.get(0).display();
    miniDesks.get(0).display();
  }

  if (desk && width/10+width/4-25<=mouseX && mouseX<=width/10+width/4+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cPhantom = true;
    } else if (!cPhantom) {
      fill(0, 0, 0, 20);
      rect(width/10+width/4, 50, 90, 80);
    }
  } else if (mousePressed) {
    cPhantom = false;
  }
  if (cPhantom) {
    fill(0, 0, 0, 20);
    rect(width/10+width/4, 50, 90, 80);
  }

  if (desk && width/10+2*width/4-25<=mouseX && mouseX<=width/10+2*width/4+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cSceneSetter = true;
    } else if (!cSceneSetter) {
      fill(0, 0, 0, 20);
      rect(width/10+2*width/4, 50, 120, 80);
    }
  } else if (mousePressed) {
    cSceneSetter = false;
  }
  if (cSceneSetter) {
    fill(0, 0, 0, 20);
    rect(width/10+2*width/4, 50, 120, 80);
  }

  if (desk && width/10+3*width/4-25<=mouseX && mouseX<=width/10+3*width/4+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cMini = true;
    } else if (!cMini) {
      fill(0, 0, 0, 20);
      rect(width/10+3*width/4, 50, 70, 80);
    }
  } else if (mousePressed) {
    cMini = false;
  }
  if (cMini) {
    fill(0, 0, 0, 20);
    rect(width/10+3*width/4, 50, 70, 80);
  }
}

public void denkeiiList() {
  if (mousePressed && !denkei && objecting && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 5*height/7-50-height/20<=mouseY && mouseY<=5*height/7-50+height/20) {
    par = false;
    deco = false;
    bar = false;
    desk = false;
    denkei = true;
    other = false;
  }
  if (denkei) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("EPar38", width/10+3*width/18, 25);
    text("LED38B", width/10+5*width/18, 25);
    text("FlatPar", width/10+7*width/18, 25);
    text("Bk75", width/10+9*width/18, 25);
    text("Par20", width/10+11*width/18, 25);
    text("Par30", width/10+13*width/18, 25);
    text("Par46", width/10+15*width/18, 25);
    ePar38s.get(0).display();
    led38Bs.get(0).display();
    flatPars.get(0).display();
    bk75s.get(0).display();
    par20s.get(0).display();
    par30s.get(0).display();
    par46s.get(0).display();
  }

  if (denkei && width/10+3*width/18-25<=mouseX && mouseX<=width/10+3*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cEPar38 = true;
    } else if (!cEPar38) {
      fill(0, 0, 0, 20);
      rect(width/10+3*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cEPar38 = false;
  }
  if (cEPar38) {
    fill(0, 0, 0, 20);
    rect(width/10+3*width/18, 50, 70, 80);
  }

  if (denkei && width/10+5*width/18-25<=mouseX && mouseX<=width/10+5*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cLED38B = true;
    } else if (!cLED38B) {
      fill(0, 0, 0, 20);
      rect(width/10+5*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cLED38B = false;
  }
  if (cLED38B) {
    fill(0, 0, 0, 20);
    rect(width/10+5*width/18, 50, 70, 80);
  }

  if (denkei && width/10+7*width/18-25<=mouseX && mouseX<=width/10+7*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cFlatPar = true;
    } else if (!cFlatPar) {
      fill(0, 0, 0, 20);
      rect(width/10+7*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cFlatPar = false;
  }
  if (cFlatPar) {
    fill(0, 0, 0, 20);
    rect(width/10+7*width/18, 50, 70, 80);
  }

  if (denkei && width/10+9*width/18-25<=mouseX && mouseX<=width/10+9*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cBk75 = true;
    } else if (!cBk75) {
      fill(0, 0, 0, 20);
      rect(width/10+9*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cBk75 = false;
  }
  if (cBk75) {
    fill(0, 0, 0, 20);
    rect(width/10+9*width/18, 50, 70, 80);
  }

  if (denkei && width/10+11*width/18-25<=mouseX && mouseX<=width/10+11*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cPar20 = true;
    } else if (!cPar20) {
      fill(0, 0, 0, 20);
      rect(width/10+11*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cPar20 = false;
  }
  if (cPar20) {
    fill(0, 0, 0, 20);
    rect(width/10+11*width/18, 50, 70, 80);
  }

  if (denkei && width/10+13*width/18-25<=mouseX && mouseX<=width/10+13*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cPar30 = true;
    } else if (!cPar30) {
      fill(0, 0, 0, 20);
      rect(width/10+13*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cPar30 = false;
  }
  if (cPar30) {
    fill(0, 0, 0, 20);
    rect(width/10+13*width/18, 50, 70, 80);
  }

  if (denkei && width/10+15*width/18-25<=mouseX && mouseX<=width/10+15*width/18+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cPar46 = true;
    } else if (!cPar46) {
      fill(0, 0, 0, 20);
      rect(width/10+15*width/18, 50, 70, 80);
    }
  } else if (mousePressed) {
    cPar46 = false;
  }
  if (cPar46) {
    fill(0, 0, 0, 20);
    rect(width/10+15*width/18, 50, 70, 80);
  }
}


public void otherList() {
  if (mousePressed && !bar && objecting && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 6*height/7-50-height/20<=mouseY && mouseY<=6*height/7-50+height/20) {
    par = false;
    deco = false;
    bar = false;
    desk = false;
    denkei = false;
    other = true;
  }
  if (other) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Bold", width/10+width/3, 25);
    text("DimmerPack", width/10+2*width/3, 25);
    bolds.get(0).display();
    dimmerPacks.get(0).display();
  }

  if (other && width/10+width/3-25<=mouseX && mouseX<=width/10+width/3+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cBold = true;
    } else if (!cBold) {
      fill(0, 0, 0, 20);
      rect(width/10+width/3, 50, 70, 80);
    }
  } else if (mousePressed) {
    cBold = false;
  }
  if (cBold) {
    fill(0, 0, 0, 20);
    rect(width/10+width/3, 50, 70, 80);
  }

  if (other && width/10+2*width/3-25<=mouseX && mouseX<=width/10+2*width/3+25 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cDimmerPack = true;
    } else if (!cDimmerPack) {
      fill(0, 0, 0, 20);
      rect(width/10+2*width/3, 50, 120, 80);
    }
  } else if (mousePressed) {
    cDimmerPack = false;
  }
  if (cDimmerPack) {
    fill(0, 0, 0, 20);
    rect(width/10+2*width/3, 50, 120, 80);
  }
}


public void tableList() {
  if (mousePressed && !table && standing && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && height/4-50-height/20<=mouseY && mouseY<=height/4-50+height/20) {
    table = true;
    stand = false;
    truss = false;
  }
  if (table) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Table", width/10+width/2, 25);

    tables.get(0).display();
  }

  if (table && width/2+width/10-40<=mouseX && mouseX<=width/2+width/10+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cTable = true;
    } else if (!cTable) {
      fill(0, 0, 0, 20);
      rect(width/2+width/10, 50, 90, 80);
    }
  } else if (mousePressed) {
    cTable = false;
  }
  if (cTable) {
    fill(0, 0, 0, 20);
    rect(width/2+width/10, 50, 90, 80);
  }
}


public void standList() {
  if (mousePressed && !stand && standing && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 2*height/4-50-height/20<=mouseY && mouseY<=2*height/4-50+height/20) {
    table = false;
    stand = true;
    truss = false;
  }
  if (stand) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Stand", width/10+width/2, 25);

    stands.get(0).display();
  }

  if (stand && width/2+width/10-90<=mouseX && mouseX<=width/2+width/10+90 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cStand = true;
    } else if (!cStand) {
      fill(0, 0, 0, 20);
      rect(width/2+width/10, 50, 200, 80);
    }
  } else if (mousePressed) {
    cStand = false;
  }
  if (cStand) {
    fill(0, 0, 0, 20);
    rect(width/2+width/10, 50, 200, 80);
  }
}


public void trussList() {
  if (mousePressed && !truss && standing && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 3*height/4-50-height/20<=mouseY && mouseY<=3*height/4-50+height/20) {
    table = false;
    stand = false;
    truss = true;
  }
  if (truss) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    text("Truss", width/10+width/2, 25);

    trusses.get(0).display();
  }

  if (truss && width/2+width/10-90<=mouseX && mouseX<=width/2+width/10+90 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cTruss = true;
    } else if (!cTruss) {
      fill(0, 0, 0, 20);
      rect(width/2+width/10, 50, 200, 80);
    }
  } else if (mousePressed) {
    cTruss = false;
  }
  if (cTruss) {
    fill(0, 0, 0, 20);
    rect(width/2+width/10, 50, 200, 80);
  }
}


public void connectList() {
  if (mousePressed && !connect && dmxing && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && height/3-50-height/20<=mouseY && mouseY<=height/3-50+height/20) {
    lineType = false;
    connect = true;
  }
  if (connect) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);

    text("SingleLine", width/10+width/5, 25);
    text("L-shaped", width/10+2*width/5, 25);
    text("Horizontal '['", width/10+3*width/5, 25);
    text("Vertical '['", width/10+4*width/5, 25);

    justLines.get(0).display();
    lLines.get(0).display();
    bracketLines.get(0).display();
    bracketLines.get(1).display();
  }


  if (connect && width/10+width/5-75<=mouseX && mouseX<=width/10+width/5+75 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cSingleLine = true;
    } else if (!cSingleLine) {
      fill(0, 0, 0, 20);
      rect(width/10+width/5, 50, 150, 80);
    }
  } else if (mousePressed) {
    cSingleLine = false;
  }
  if (cSingleLine) {
    fill(0, 0, 0, 20);
    rect(width/10+width/5, 50, 150, 80);
  }

  if (connect && width/10+2*width/5-75<=mouseX && mouseX<=width/10+2*width/5+75 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cLshaped = true;
    } else if (!cLshaped) {
      fill(0, 0, 0, 20);
      rect(width/10+2*width/5, 50, 150, 80);
    }
  } else if (mousePressed) {
    cLshaped = false;
  }
  if (cLshaped) {
    fill(0, 0, 0, 20);
    rect(width/10+2*width/5, 50, 150, 80);
  }

  if (connect && width/10+3*width/5-75<=mouseX && mouseX<=width/10+3*width/5+75 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cHorizontal = true;
    } else if (!cHorizontal) {
      fill(0, 0, 0, 20);
      rect(width/10+3*width/5, 50, 150, 80);
    }
  } else if (mousePressed) {
    cHorizontal = false;
  }
  if (cHorizontal) {
    fill(0, 0, 0, 20);
    rect(width/10+3*width/5, 50, 150, 80);
  }

  if (connect && width/10+4*width/5-75<=mouseX && mouseX<=width/10+4*width/5+75 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cVertical = true;
    } else if (!cVertical) {
      fill(0, 0, 0, 20);
      rect(width/10+4*width/5, 50, 150, 80);
    }
  } else if (mousePressed) {
    cVertical = false;
  }
  if (cVertical) {
    fill(0, 0, 0, 20);
    rect(width/10+4*width/5, 50, 150, 80);
  }

  if (keepSingleLine)cSingleLine = true;
  if (keepLshaped) cLshaped = true;
  if (keepHorizontal) cHorizontal = true;
  if (keepVertical) cVertical = true;
}



public void lineTypeList() {
  if (mousePressed && !lineType && dmxing && width/10-width/12<=mouseX && mouseX<=width/10+width/12 && 2*height/3-50-height/20<=mouseY && mouseY<=2*height/3-50+height/20) {
    lineType = true;
    connect = false;
  }
  if (lineType) {
    stroke(0);
    fill(200);
    rect(width/2+width/10, 50, 4*width/5, 100);
    fill(0);
    textSize(20);
    
    text("1m", width/10+3*width/18, 25);
    text("2m", width/10+5*width/18, 25);
    text("3m", width/10+7*width/18, 25);
    text("5m", width/10+9*width/18, 25);
    text("10m", width/10+11*width/18, 25);
    text("15m", width/10+13*width/18, 25);
    text("power", width/10+15*width/18, 25);
    
    strokeWeight(3);
    stroke(255, 0, 0);
    line(width/10+3*width/18, 45, width/10+3*width/18, 70);
    stroke(200, 0, 255);
    line(width/10+5*width/18, 45, width/10+5*width/18, 70);
    stroke(0, 255, 255);
    line(width/10+7*width/18, 45, width/10+7*width/18, 70);
    stroke(255, 130, 0);
    line(width/10+9*width/18, 45, width/10+9*width/18, 70);
    stroke(0, 255, 0);
    line(width/10+11*width/18, 45, width/10+11*width/18, 70);
    stroke(0, 0, 255);
    line(width/10+13*width/18, 45, width/10+13*width/18, 70);
    stroke(0);
    line(width/10+15*width/18, 45, width/10+15*width/18, 70);
    strokeWeight(1);
  }

  if (lineType && width/10+3*width/18-40<=mouseX && mouseX<=width/10+3*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      c1m = true;
    } else if (!c1m) {
      fill(0, 0, 0, 20);
      rect(width/10+3*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    c1m = false;
  }
  if (c1m) {
    fill(0, 0, 0, 20);
    rect(width/10+3*width/18, 50, 75, 80);
  }

  if (lineType && width/10+5*width/18-40<=mouseX && mouseX<=width/10+5*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      c2m = true;
    } else if (!c2m) {
      fill(0, 0, 0, 20);
      rect(width/10+5*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    c2m = false;
  }
  if (c2m) {
    fill(0, 0, 0, 20);
    rect(width/10+5*width/18, 50, 75, 80);
  }

  if (lineType && width/10+7*width/18-40<=mouseX && mouseX<=width/10+7*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      c3m = true;
    } else if (!c3m) {
      fill(0, 0, 0, 20);
      rect(width/10+7*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    c3m = false;
  }
  if (c3m) {
    fill(0, 0, 0, 20);
    rect(width/10+7*width/18, 50, 75, 80);
  }

  if (lineType && width/10+9*width/18-40<=mouseX && mouseX<=width/10+9*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      c5m = true;
    } else if (!c5m) {
      fill(0, 0, 0, 20);
      rect(width/10+9*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    c5m = false;
  }
  if (c5m) {
    fill(0, 0, 0, 20);
    rect(width/10+9*width/18, 50, 75, 80);
  }

  if (lineType && width/10+11*width/18-40<=mouseX && mouseX<=width/10+11*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      c10m = true;
    } else if (!c10m) {
      fill(0, 0, 0, 20);
      rect(width/10+11*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    c10m = false;
  }
  if (c10m) {
    fill(0, 0, 0, 20);
    rect(width/10+11*width/18, 50, 75, 80);
  }

  if (lineType && width/10+13*width/18-40<=mouseX && mouseX<=width/10+13*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      c15m = true;
    } else if (!c15m) {
      fill(0, 0, 0, 20);
      rect(width/10+13*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    c15m = false;
  }
  if (c15m) {
    fill(0, 0, 0, 20);
    rect(width/10+13*width/18, 50, 75, 80);
  }

  if (lineType && width/10+15*width/18-40<=mouseX && mouseX<=width/10+15*width/18+40 && 60-20<=mouseY && mouseY<=60+20) {
    if (mousePressed) {
      cpower = true;
    } else if (!cpower) {
      fill(0, 0, 0, 20);
      rect(width/10+15*width/18, 50, 75, 80);
    }
  } else if (mousePressed && (mouseY >= 500 || 100 >= mouseY || mouseX <= width/10+width/10)) {
    cpower = false;
  }
  if (cpower) {
    fill(0, 0, 0, 20);
    rect(width/10+15*width/18, 50, 75, 80);
  }
}
public void menus() {
  stroke(0);
  fill(200);
  rect(width/2, 550, width, 100);

  standButton();
  objectButton();
  dmxButton();
  fileButton();
}

public void standButton() {
  stroke(0);
  fill(200);
  rect(2*width/13, 550, width/5, 70);
  fill(0);
  textSize(30);
  text("stand", 2*width/13, 550);
}

public void objectButton() {
  stroke(0);
  fill(200);
  rect(5*width/13, 550, width/5, 70);
  fill(0);
  textSize(30);
  text("object", 5*width/13, 550);
}

public void dmxButton() {
  stroke(0);
  fill(200);
  rect(8*width/13, 550, width/5, 70);
  fill(0);
  textSize(30);
  text("DMX", 8*width/13, 550);
}

public void fileButton() {
  stroke(0);
  fill(200);
  rect(11*width/13, 550, width/5, 70);
  fill(0);
  textSize(30);
  text("File", 11*width/13, 550);
}
boolean mousePressing = false;
boolean click = false;
public void oneClick() {
  if (!mousePressing && mousePressed)click = true;
  else click = false;
  if (mousePressed)mousePressing = true;
  else mousePressing = false;
}
public void removes() {
  if (Remove) {
    if (click && !cTable && !cStand && !cTruss && !cLed && !cMega64 && !cMoving && !cPar12 && !cStrobe && !cDekker && !cOld && !cNew && !cPhantom && !cSceneSetter && !cMini && !cEPar38 && !cLED38B && !cFlatPar && !cBk75 && !cPar20 && !cPar30 && !cPar46 && !cBold && !cDimmerPack) {
      removeObject(leds);
      removeObject(mega64s);
      removeObject(movings);
      removeObject(par12s);
      removeObject(strobes);
      removeObject(dekkers);
      removeObject(oldColorbars);
      removeObject(newColorbars);
      removeObject(phantoms);
      removeObject(sceneSetters);
      removeObject(miniDesks);
      removeObject(ePar38s);
      removeObject(led38Bs);
      removeObject(flatPars);
      removeObject(bk75s);
      removeObject(par20s);
      removeObject(par30s);
      removeObject(par46s);
      removeObject(bolds);
      removeObject(dimmerPacks);
      removeObject(tables);
      removeObject(stands);
      removeObject(trusses);
    }
    if (mousePressed && !cSingleLine && !cLshaped && !cHorizontal && !cVertical) {
      removeLine(justLines);
      removeLine(lLines);
      removeLine(bracketLines);
    }
  }
}
Equipment repObj;
boolean repObjced = false;
boolean kp = false;
public void replaceObject(ArrayList<Equipment> objects) {

  boolean replaced = false;


  println(keyPressing);

  if (repObjced) {
    rotate = repObj.r;
    if (!kp && keyPressed && (key == 'r' || key == 'R')) {
      if (rotate != 11)rotate++;
      else rotate = 0;
    }

    if (keyPressed)kp = true;
    else kp=false;

    if (width/10 + width/5/2 < mouseX && mouseX < width && 50+50 < mouseY && mouseY < 550 - 50) {

      stroke(255, 0, 0);
      if ((width/10+width/5/2+width)/2 - 10 < mouseX && mouseX < (width/10+width/5/2+width)/2 + 10) {
        ox = (width/10+width/5/2+width)/2;
        line((width/10+width/5/2+width)/2, 50+50, (width/10+width/5/2+width)/2, 550-50);
      } else {
        ox = mouseX;
      }

      oy = mouseY;

      if (objects != leds)drawVerticalLines(leds);
      if (objects != mega64s)drawVerticalLines(mega64s);
      if (objects != movings)drawVerticalLines(movings);
      if (objects != par12s)drawVerticalLines(par12s);
      if (objects != strobes)drawVerticalLines(strobes);
      if (objects != dekkers)drawVerticalLines(dekkers);
      if (objects != oldColorbars)drawVerticalLines(oldColorbars);
      if (objects != newColorbars)drawVerticalLines(newColorbars);
      if (objects != phantoms)drawVerticalLines(phantoms);
      if (objects != sceneSetters)drawVerticalLines(sceneSetters);
      if (objects != miniDesks)drawVerticalLines(miniDesks);
      if (objects != ePar38s)drawVerticalLines(ePar38s);
      if (objects != led38Bs)drawVerticalLines(led38Bs);
      if (objects != flatPars)drawVerticalLines(flatPars);
      if (objects != bk75s)drawVerticalLines(bk75s);
      if (objects != par20s)drawVerticalLines(par20s);
      if (objects != par30s)drawVerticalLines(par30s);
      if (objects != par46s)drawVerticalLines(par46s);
      if (objects != bolds)drawVerticalLines(bolds);
      if (objects != dimmerPacks)drawVerticalLines(dimmerPacks);
      if (objects != tables)drawVerticalLines(tables);
      if (objects != stands)drawVerticalLines(stands);
      if (objects != trusses)drawVerticalLines(trusses);

      smartGuides(stands);
      smartGuides(trusses);

      stroke(0);

      x = ox*cos(-rotate * 2*PI/12) - oy*sin(-rotate * 2*PI/12);
      y = ox*sin(-rotate * 2*PI/12) + oy*cos(-rotate * 2*PI/12);

      repObj.x = x;
      repObj.y = y;
      repObj.r = rotate;
    }
  }
  for (int i = objects.size()-1; i > 0; i--) {
    Equipment obj = objects.get(i);
    if (onObject(obj) && mousePressed && !repObjced) {
      repObj = obj;
      replaced = true;
      repObjced = true;
    }
    if (replaced) break;
  }
}

public void replaces() {
  if (Replace) {
    if (!cTable && !cStand && !cTruss && !cLed && !cMega64 && !cMoving && !cPar12 && !cStrobe && !cDekker && !cOld && !cNew && !cPhantom && !cSceneSetter && !cMini && !cEPar38 && !cLED38B && !cFlatPar && !cBk75 && !cPar20 && !cPar30 && !cPar46 && !cBold && !cDimmerPack) {
      replaceObject(leds);
      replaceObject(mega64s);
      replaceObject(movings);
      replaceObject(par12s);
      replaceObject(strobes);
      replaceObject(dekkers);
      replaceObject(oldColorbars);
      replaceObject(newColorbars);
      replaceObject(phantoms);
      replaceObject(sceneSetters);
      replaceObject(miniDesks);
      replaceObject(ePar38s);
      replaceObject(led38Bs);
      replaceObject(flatPars);
      replaceObject(bk75s);
      replaceObject(par20s);
      replaceObject(par30s);
      replaceObject(par46s);
      replaceObject(bolds);
      replaceObject(dimmerPacks);
      replaceObject(tables);
      replaceObject(stands);
      replaceObject(trusses);
    }
  }
}

public void mouseReleased() {
  if (repObjced)repObjced = false;
}
boolean standing=true, objecting=false, dmxing=false, fileing=false;
public void tabs() {
  standTab();
  objectTab();
  dmxTab();
  fileTab();
}

public void standTab() {
  if (mousePressed && !standing && 2*width/13-width/10<=mouseX && mouseX<=2*width/13+width/10 && 550-35<=mouseY && mouseY<=550+35) {
    standing=true;
    objecting=false;
    dmxing=false;

    par = false;
    deco = false;
    bar = false;
    desk = false;
    denkei = false;
    other = false;

    lineType = false;
    connect = false;
  }
  if (standing) {

    stroke(0);
    fill(200);
    rect(width/10, height/2-50, width/5, height-100);

    table();
    stand();
    truss();
  }
}

public void table() {
  stroke(0);
  fill(200);
  rect(width/10, height/4-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("table", width/10, height/4-50);
}

public void stand() {
  stroke(0);
  fill(200);
  rect(width/10, height/2-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("stand", width/10, height/2-50);
}

public void truss() {
  stroke(0);
  fill(200);
  rect(width/10, 3*height/4-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("truss", width/10, 3*height/4-50);
}

public void objectTab() {
  if (mousePressed && !objecting && 5*width/13-width/10<=mouseX && mouseX<=5*width/13+width/10 && 550-35<=mouseY && mouseY<=550+35) {
    standing=false;
    objecting=true;
    dmxing=false;

    table = false;
    stand = false;
    truss = false;

    lineType = false;
    connect = false;
  }
  if (objecting) {

    stroke(0);
    fill(200);
    rect(width/10, height/2-50, width/5, height-100);

    par();
    decoration();
    colorBar();
    desk();
    denkei();
    other();
  }
}

public void par() {
  stroke(0);
  fill(200);
  rect(width/10, height/7-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("Par", width/10, height/7-50);
}

public void decoration() {
  stroke(0);
  fill(200);
  rect(width/10, 2*height/7-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("decoration", width/10, 2*height/7-50);
}

public void colorBar() {
  stroke(0);
  fill(200);
  rect(width/10, 3*height/7-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("colorBar", width/10, 3*height/7-50);
}

public void desk() {
  stroke(0);
  fill(200);
  rect(width/10, 4*height/7-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("desk", width/10, 4*height/7-50);
}

public void denkei() {
  stroke(0);
  fill(200);
  rect(width/10, 5*height/7-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("denkei", width/10, 5*height/7-50);
}

public void other() {
  stroke(0);
  fill(200);
  rect(width/10, 6*height/7-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("other", width/10, 6*height/7-50);
}

public void dmxTab() {
  if (mousePressed && !dmxing && 8*width/13-width/10<=mouseX && mouseX<=8*width/13+width/10 && 550-35<=mouseY && mouseY<=550+35) {
    standing=false;
    objecting=false;
    dmxing=true;

    par = false;
    deco = false;
    bar = false;
    desk = false;
    denkei = false;
    other = false;

    table = false;
    stand = false;
    truss = false;
  }
  if (dmxing) {

    stroke(0);
    fill(200);
    rect(width/10, height/2-50, width/5, height-100);

    connect();
    lineType();
  }
}

public void connect() {
  stroke(0);
  fill(200);
  rect(width/10, height/3-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("connect", width/10, height/3-50);
}

public void lineType() {
  stroke(0);
  fill(200);
  rect(width/10, 2*height/3-50, width/6, height/10);
  fill(0);
  textSize(30);
  text("line type", width/10, 2*height/3-50);
}

public void fileTab() {
  if (mousePressed && !fileing && 11*width/13-width/10<=mouseX && mouseX<=11*width/13+width/10 && 550-35<=mouseY && mouseY<=550+35) {
    standing=false;
    objecting=false;
    dmxing=false;
    fileing=true;

    par = false;
    deco = false;
    bar = false;
    desk = false;
    denkei = false;
    other = false;

    table = false;
    stand = false;
    truss = false;

    lineType = false;
    connect = false;
  }
  if (fileing) {

    stroke(0);
    fill(200);
    rect(width/10, height/2-50, width/5, height-100);
    
    choseOperation();
  }
}
public int touchLine(ArrayList<Line> Lines) {
  boolean touched = false;
  for (int i = Lines.size()-1; i > 0; i--) {
    if (touched) break;
    Line lines = Lines.get(i);
    float sx = lines.sx;
    float sy = lines.sy;
    float ex = lines.ex;
    float ey = lines.ey;

    if (lines instanceof JustLine) {
      if(isPointOnLine(sx, sy, ex, ey))touched = true;
    } else if (lines instanceof LLine) {
      LLine Llines = (LLine) lines;
      float mx = Llines.mx;
      float my = Llines.my;
      if(isPointOnLine(sx, sy, mx, my) || isPointOnLine(mx, my, ex, ey))touched = true;
    } else if (lines instanceof BracketLine) {
      BracketLine Blines = (BracketLine) lines;
      float m1x = Blines.m1x;
      float m1y = Blines.m1y;
      float m2x = Blines.m2x;
      float m2y = Blines.m2y;
      if(isPointOnLine(sx, sy, m1x, m1y) || isPointOnLine(m1x, m1y, m2x, m2y) || isPointOnLine(m2x, m2y, ex, ey))touched = true;
    }
    if (touched) {
      return i;
    }
  }
  return -1;
}

public boolean isPointOnLine(float startX, float startY, float endX, float endY) {
  // 垂直線の処理
  if (startX == endX) {
    if (mouseX == (int)startX && isBetween(startY, endY, mouseY)) {
      return true;
    }
  } else {
    // 傾きと切片の計算
    float slope = (endY - startY) / (endX - startX);
    float intercept = startY - slope * startX;
    
    // マウスのY座標が線の方程式に一致するか確認（四捨五入を使用）
    if (mouseY == (int)Math.round(slope * mouseX + intercept)) {
      if (isBetween(startX, endX, mouseX) && isBetween(startY, endY, mouseY)) {
        return true;
      }
    }
  }
  return false;
}

public boolean isBetween(float start, float end, float value) {
  return (start < end) ? (start <= value && value <= end) : (end <= value && value <= start);
}


  public void settings() { size(800, 600); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "setuzokuzu" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
